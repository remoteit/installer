#! /bin/sh
### BEGIN INIT INFO
# Provides:          connectd_schannel
# Required-Start:    $network $named $portmap $syslog $remote_fs
# Required-Stop:     $remote_fs $syslog 
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Connectd Remote.it schannel startup
# Description:       This file should be used to construct scripts to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Mike Johnson <mike@remote.it>
#

# Do NOT "set -e"

# pick up global options, e.g. PLATFORM and BASEDIR
BASEDIR=
. "$BASEDIR"/usr/bin/connectd_options

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="remote.it connectd server channel daemon"
NAME=connectd_schannel
DAEMON="$BIN_DIR"/$NAME.$PLATFORM
CONF_FILE="$BASEDIR"/etc/connectd/schannel.conf
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME="$BASEDIR"/etc/init.d/$NAME
#

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables (OS dependent)
# . /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# getPID pidfile
#
# Return PID or 0 for not found
#
getPID()
{
    ret=0
    if [ -f $1 ]; then
        ret="$(cat $1)"
    fi
    echo $ret
}

#
# isRunning pid
# return 0 not running
#
isRunning()
{
    ret=0
    if [ -d /proc/$pid ]; then
        ret=1
    fi
    return $ret
}

#
# killit pid
#
killit()
{
    pid=$1
    ret=2
    kill $pid
    #wait for pid to die 5 seconds
    count=0                   # Initialise a counter
    while [ $count -lt 5 ]  
    do
    if [ ! -d /proc/$pid ]; then
        #if [ "$pid" != `pidrunning $pid`  ] 
        #then
           ret=0
           break;
        fi
        # not dead yet
        count=`expr $count + 1`  # Increment the counter
        if [ "$VERBOSE" != no  ]; then
            echo "still running"
        fi
        sleep 1
    done
    return $ret
}

#
# isDirEmpty dir
# returns 1 for empty
#
isDirEmpty()
{
    ret=0
    if [  ! "$(ls -A $1)" ]; then
        ret=1
    fi 
    return $ret
}

#
# Function that starts the daemon/service
#
do_start()
{
	# first check package and see if we need to update remote.it software version info
	logger "[Connectd.schannel] schannel startup"
    #
    # see if we are already running
    pid="$(getPID $PIDFILE)"
    if [ $pid -ne 0 ]; then
        # We have a pidfile
        isRunning $pid
        if [ $? -eq 1 ]; then
            #already running
            logger "[Connectd.schannel] already active"
            return 1
        else
            #pid file but not running, delete pidfile
            logger "[Connectd.schannel] pidfile exists but not running, delete pidfile" 
            rm $PIDFILE
        fi
    fi
    # 
    # Check that we have something in active directory
    isDirEmpty "$DEVICES_ACTIVE" 
    if [ $? -eq 1 ]; then
        logger "[Connectd.schannel] Not started, no remote.it devices active"
        return 2
    else
        #start schannel
        $DAEMON -f $CONF_FILE -d $PIDFILE
    fi

	return 0
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
    logger "[Connectd.schannel] schannel shutdown"
    #
    # see if we are already running
    pid="$(getPID $PIDFILE)"
    if [ $pid -ne 0 ]; then
        isRunning $pid
        if [ "$?" -eq 1 ]; then
            #running, kill it
            killit $pid
            RETVAL="$?"
            rm $PIDFILE
        else
            #pid file but not running, delete pidfile
            logger "[Connectd.schannel] pidfile exists but not running, delete pidfile"
            rm $PIDFILE
            RETVAL=1
        fi
    else
        logger "[Connectd.schannel] Not running"
        RETVAL=2
    fi

	return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
	#
	# If the daemon can reload its configuration without
	# restarting (for example, when it is sent a SIGHUP),
	# then implement that here.
	#
    do_stop
    sleep 1
    do_start
	return 0
}

case "$1" in
  start)
	[ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  restart|reload|force-reload)
	#
	# If do_reload() is not implemented then leave this commented out
	# and leave 'force-reload' as an alias for 'restart'.
	#
	log_daemon_msg "Reloading $DESC" "$NAME"
	do_reload
	log_end_msg $?
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
	exit 3
	;;
esac

:
